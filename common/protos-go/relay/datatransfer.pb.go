// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relay/datatransfer.proto

package relay

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/hyperledger-labs/weaver-dlt-interoperability/common/protos-go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("relay/datatransfer.proto", fileDescriptor_74e21a3832f7013d) }

var fileDescriptor_74e21a3832f7013d = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x61, 0x00, 0x09, 0x53, 0x04, 0x32, 0x0b, 0xca, 0xc8, 0x4c, 0x62, 0x09, 0xc4, 0x03,
	0x80, 0x3a, 0xa3, 0x42, 0x11, 0x03, 0xdb, 0x25, 0xfe, 0x48, 0xad, 0xba, 0x71, 0x7a, 0xbe, 0xb4,
	0xf2, 0xfb, 0xf0, 0xa0, 0x28, 0x7f, 0xba, 0x74, 0x62, 0xbc, 0xdf, 0x77, 0xbf, 0x93, 0xbe, 0x53,
	0x77, 0x0c, 0x4f, 0xc9, 0x58, 0x12, 0x12, 0xa6, 0x26, 0xfe, 0x80, 0x8b, 0x96, 0x83, 0x04, 0x7d,
	0x36, 0x24, 0xd9, 0x4d, 0x15, 0x36, 0x9b, 0xd0, 0x18, 0xaa, 0xd6, 0x63, 0x90, 0xe9, 0x89, 0x44,
	0x21, 0xc1, 0x11, 0xdb, 0x76, 0xe0, 0x34, 0xb2, 0xc7, 0xdf, 0x53, 0x35, 0x9b, 0x93, 0xd0, 0xe7,
	0x74, 0x57, 0x3f, 0xa8, 0xd9, 0x07, 0xb6, 0x1d, 0xa2, 0x2c, 0x7b, 0x55, 0x5f, 0x15, 0xa3, 0x55,
	0xbc, 0xf7, 0x56, 0x76, 0x79, 0x18, 0x5f, 0xaa, 0xf5, 0xfd, 0x89, 0x36, 0xea, 0x62, 0x89, 0xc6,
	0x8e, 0xab, 0xb7, 0x87, 0xec, 0xcb, 0x61, 0xbf, 0xa0, 0xe4, 0x03, 0xd9, 0x63, 0xe1, 0x59, 0x5d,
	0xf7, 0xc2, 0x9c, 0xdd, 0x0e, 0xfc, 0x6f, 0xed, 0x75, 0xf1, 0xfd, 0x56, 0x3b, 0x59, 0x75, 0x65,
	0x8f, 0xcd, 0x2a, 0xb5, 0x60, 0x0f, 0x5b, 0x83, 0x73, 0x4f, 0x65, 0x34, 0x7b, 0xd0, 0x0e, 0x9c,
	0x5b, 0x2f, 0xb9, 0x6b, 0x04, 0x1c, 0x5a, 0x30, 0x95, 0xce, 0x3b, 0x49, 0x66, 0x2a, 0x3d, 0xd4,
	0x8d, 0x79, 0x1d, 0xcc, 0xf0, 0xb2, 0xf2, 0x7c, 0x00, 0x4f, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xcb, 0x9a, 0xdc, 0xd3, 0x5c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataTransferClient is the client API for DataTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataTransferClient interface {
	// the requesting relay sends a RequestState request to the remote relay with a
	// query defining the data it wants to receive
	RequestState(ctx context.Context, in *common.Query, opts ...grpc.CallOption) (*common.Ack, error)
	// the remote relay asynchronously sends back the requested data with
	// SendState
	SendState(ctx context.Context, in *common.ViewPayload, opts ...grpc.CallOption) (*common.Ack, error)
	// Handling state sent from the driver.
	SendDriverState(ctx context.Context, in *common.ViewPayload, opts ...grpc.CallOption) (*common.Ack, error)
}

type dataTransferClient struct {
	cc *grpc.ClientConn
}

func NewDataTransferClient(cc *grpc.ClientConn) DataTransferClient {
	return &dataTransferClient{cc}
}

func (c *dataTransferClient) RequestState(ctx context.Context, in *common.Query, opts ...grpc.CallOption) (*common.Ack, error) {
	out := new(common.Ack)
	err := c.cc.Invoke(ctx, "/relay.DataTransfer/RequestState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataTransferClient) SendState(ctx context.Context, in *common.ViewPayload, opts ...grpc.CallOption) (*common.Ack, error) {
	out := new(common.Ack)
	err := c.cc.Invoke(ctx, "/relay.DataTransfer/SendState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataTransferClient) SendDriverState(ctx context.Context, in *common.ViewPayload, opts ...grpc.CallOption) (*common.Ack, error) {
	out := new(common.Ack)
	err := c.cc.Invoke(ctx, "/relay.DataTransfer/SendDriverState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataTransferServer is the server API for DataTransfer service.
type DataTransferServer interface {
	// the requesting relay sends a RequestState request to the remote relay with a
	// query defining the data it wants to receive
	RequestState(context.Context, *common.Query) (*common.Ack, error)
	// the remote relay asynchronously sends back the requested data with
	// SendState
	SendState(context.Context, *common.ViewPayload) (*common.Ack, error)
	// Handling state sent from the driver.
	SendDriverState(context.Context, *common.ViewPayload) (*common.Ack, error)
}

// UnimplementedDataTransferServer can be embedded to have forward compatible implementations.
type UnimplementedDataTransferServer struct {
}

func (*UnimplementedDataTransferServer) RequestState(ctx context.Context, req *common.Query) (*common.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestState not implemented")
}
func (*UnimplementedDataTransferServer) SendState(ctx context.Context, req *common.ViewPayload) (*common.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendState not implemented")
}
func (*UnimplementedDataTransferServer) SendDriverState(ctx context.Context, req *common.ViewPayload) (*common.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDriverState not implemented")
}

func RegisterDataTransferServer(s *grpc.Server, srv DataTransferServer) {
	s.RegisterService(&_DataTransfer_serviceDesc, srv)
}

func _DataTransfer_RequestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataTransferServer).RequestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.DataTransfer/RequestState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataTransferServer).RequestState(ctx, req.(*common.Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataTransfer_SendState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ViewPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataTransferServer).SendState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.DataTransfer/SendState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataTransferServer).SendState(ctx, req.(*common.ViewPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataTransfer_SendDriverState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ViewPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataTransferServer).SendDriverState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.DataTransfer/SendDriverState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataTransferServer).SendDriverState(ctx, req.(*common.ViewPayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataTransfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relay.DataTransfer",
	HandlerType: (*DataTransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestState",
			Handler:    _DataTransfer_RequestState_Handler,
		},
		{
			MethodName: "SendState",
			Handler:    _DataTransfer_SendState_Handler,
		},
		{
			MethodName: "SendDriverState",
			Handler:    _DataTransfer_SendDriverState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relay/datatransfer.proto",
}
