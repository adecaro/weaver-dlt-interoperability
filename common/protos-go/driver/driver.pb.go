// Code generated by protoc-gen-go. DO NOT EDIT.
// source: driver/driver.proto

package driver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/hyperledger-labs/weaver-dlt-interoperability/common/protos-go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("driver/driver.proto", fileDescriptor_651b72783301f7a9) }

var fileDescriptor_651b72783301f7a9 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8f, 0xbf, 0x6e, 0x86, 0x30,
	0x0c, 0xc4, 0x3b, 0x31, 0x50, 0x55, 0xaa, 0xc2, 0xc6, 0xd8, 0x3d, 0x44, 0xa2, 0x4f, 0xd0, 0x3f,
	0x4b, 0xa7, 0x8a, 0x76, 0xeb, 0x96, 0x04, 0x0b, 0x22, 0x92, 0x18, 0x8c, 0x43, 0xc5, 0xdb, 0x7f,
	0x82, 0xf0, 0x4d, 0xd6, 0xfd, 0xce, 0x3a, 0xdd, 0x95, 0x55, 0x4f, 0x6e, 0x03, 0x52, 0xf9, 0x34,
	0x33, 0x21, 0xa3, 0x28, 0xb2, 0xaa, 0x9f, 0x2d, 0x86, 0x80, 0x51, 0x69, 0x3b, 0x65, 0xa7, 0x16,
	0x17, 0x59, 0x12, 0xd0, 0x9e, 0x59, 0xfb, 0x55, 0x56, 0x9f, 0xe7, 0xff, 0x07, 0x86, 0x90, 0xa2,
	0xb3, 0x9a, 0x1d, 0x46, 0xd1, 0x96, 0xe2, 0x07, 0x96, 0x04, 0x2b, 0x67, 0xf7, 0x97, 0x35, 0x83,
	0x78, 0x6a, 0x72, 0x42, 0xd3, 0x1d, 0x09, 0xf5, 0xe3, 0x5d, 0xbe, 0xd9, 0xe9, 0xe5, 0xe1, 0xbd,
	0xfb, 0xfb, 0x1e, 0x1c, 0x8f, 0xc9, 0x1c, 0x58, 0x8d, 0xfb, 0x0c, 0xe4, 0xa1, 0x1f, 0x80, 0xa4,
	0xd7, 0x66, 0x55, 0xff, 0xa0, 0x37, 0x20, 0xd9, 0x7b, 0x96, 0x2e, 0x32, 0x10, 0xce, 0x40, 0xda,
	0x38, 0xef, 0x78, 0x57, 0x57, 0xb1, 0xb3, 0xd2, 0x2a, 0x07, 0xbc, 0x16, 0x99, 0xe2, 0x24, 0xaf,
	0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0x17, 0xe4, 0xfe, 0xe9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DriverCommunicationClient is the client API for DriverCommunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriverCommunicationClient interface {
	// the remote relay sends a RequestDriverState request to its driver with a
	// query defining the data it wants to receive
	RequestDriverState(ctx context.Context, in *common.Query, opts ...grpc.CallOption) (*common.Ack, error)
}

type driverCommunicationClient struct {
	cc *grpc.ClientConn
}

func NewDriverCommunicationClient(cc *grpc.ClientConn) DriverCommunicationClient {
	return &driverCommunicationClient{cc}
}

func (c *driverCommunicationClient) RequestDriverState(ctx context.Context, in *common.Query, opts ...grpc.CallOption) (*common.Ack, error) {
	out := new(common.Ack)
	err := c.cc.Invoke(ctx, "/driver.DriverCommunication/RequestDriverState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverCommunicationServer is the server API for DriverCommunication service.
type DriverCommunicationServer interface {
	// the remote relay sends a RequestDriverState request to its driver with a
	// query defining the data it wants to receive
	RequestDriverState(context.Context, *common.Query) (*common.Ack, error)
}

// UnimplementedDriverCommunicationServer can be embedded to have forward compatible implementations.
type UnimplementedDriverCommunicationServer struct {
}

func (*UnimplementedDriverCommunicationServer) RequestDriverState(ctx context.Context, req *common.Query) (*common.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDriverState not implemented")
}

func RegisterDriverCommunicationServer(s *grpc.Server, srv DriverCommunicationServer) {
	s.RegisterService(&_DriverCommunication_serviceDesc, srv)
}

func _DriverCommunication_RequestDriverState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommunicationServer).RequestDriverState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.DriverCommunication/RequestDriverState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommunicationServer).RequestDriverState(ctx, req.(*common.Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _DriverCommunication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "driver.DriverCommunication",
	HandlerType: (*DriverCommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestDriverState",
			Handler:    _DriverCommunication_RequestDriverState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver/driver.proto",
}
