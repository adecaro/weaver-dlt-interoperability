// Code generated by protoc-gen-go. DO NOT EDIT.
// source: networks/networks.proto

package networks

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/hyperledger-labs/weaver-dlt-interoperability/common/protos-go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DbName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DbName) Reset()         { *m = DbName{} }
func (m *DbName) String() string { return proto.CompactTextString(m) }
func (*DbName) ProtoMessage()    {}
func (*DbName) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dd564d51b8056f, []int{0}
}

func (m *DbName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DbName.Unmarshal(m, b)
}
func (m *DbName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DbName.Marshal(b, m, deterministic)
}
func (m *DbName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbName.Merge(m, src)
}
func (m *DbName) XXX_Size() int {
	return xxx_messageInfo_DbName.Size(m)
}
func (m *DbName) XXX_DiscardUnknown() {
	xxx_messageInfo_DbName.DiscardUnknown(m)
}

var xxx_messageInfo_DbName proto.InternalMessageInfo

func (m *DbName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RelayDatabase struct {
	Pairs                map[string]string `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RelayDatabase) Reset()         { *m = RelayDatabase{} }
func (m *RelayDatabase) String() string { return proto.CompactTextString(m) }
func (*RelayDatabase) ProtoMessage()    {}
func (*RelayDatabase) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dd564d51b8056f, []int{1}
}

func (m *RelayDatabase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayDatabase.Unmarshal(m, b)
}
func (m *RelayDatabase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayDatabase.Marshal(b, m, deterministic)
}
func (m *RelayDatabase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayDatabase.Merge(m, src)
}
func (m *RelayDatabase) XXX_Size() int {
	return xxx_messageInfo_RelayDatabase.Size(m)
}
func (m *RelayDatabase) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayDatabase.DiscardUnknown(m)
}

var xxx_messageInfo_RelayDatabase proto.InternalMessageInfo

func (m *RelayDatabase) GetPairs() map[string]string {
	if m != nil {
		return m.Pairs
	}
	return nil
}

type GetStateMessage struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateMessage) Reset()         { *m = GetStateMessage{} }
func (m *GetStateMessage) String() string { return proto.CompactTextString(m) }
func (*GetStateMessage) ProtoMessage()    {}
func (*GetStateMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dd564d51b8056f, []int{2}
}

func (m *GetStateMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStateMessage.Unmarshal(m, b)
}
func (m *GetStateMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStateMessage.Marshal(b, m, deterministic)
}
func (m *GetStateMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateMessage.Merge(m, src)
}
func (m *GetStateMessage) XXX_Size() int {
	return xxx_messageInfo_GetStateMessage.Size(m)
}
func (m *GetStateMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateMessage proto.InternalMessageInfo

func (m *GetStateMessage) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type NetworkQuery struct {
	Policy               []string `protobuf:"bytes,1,rep,name=policy,proto3" json:"policy,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	RequestingRelay      string   `protobuf:"bytes,3,opt,name=requesting_relay,json=requestingRelay,proto3" json:"requesting_relay,omitempty"`
	RequestingNetwork    string   `protobuf:"bytes,4,opt,name=requesting_network,json=requestingNetwork,proto3" json:"requesting_network,omitempty"`
	Certificate          string   `protobuf:"bytes,5,opt,name=certificate,proto3" json:"certificate,omitempty"`
	RequestorSignature   string   `protobuf:"bytes,6,opt,name=requestor_signature,json=requestorSignature,proto3" json:"requestor_signature,omitempty"`
	Nonce                string   `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	RequestingOrg        string   `protobuf:"bytes,8,opt,name=requesting_org,json=requestingOrg,proto3" json:"requesting_org,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkQuery) Reset()         { *m = NetworkQuery{} }
func (m *NetworkQuery) String() string { return proto.CompactTextString(m) }
func (*NetworkQuery) ProtoMessage()    {}
func (*NetworkQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dd564d51b8056f, []int{3}
}

func (m *NetworkQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkQuery.Unmarshal(m, b)
}
func (m *NetworkQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkQuery.Marshal(b, m, deterministic)
}
func (m *NetworkQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkQuery.Merge(m, src)
}
func (m *NetworkQuery) XXX_Size() int {
	return xxx_messageInfo_NetworkQuery.Size(m)
}
func (m *NetworkQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkQuery.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkQuery proto.InternalMessageInfo

func (m *NetworkQuery) GetPolicy() []string {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *NetworkQuery) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NetworkQuery) GetRequestingRelay() string {
	if m != nil {
		return m.RequestingRelay
	}
	return ""
}

func (m *NetworkQuery) GetRequestingNetwork() string {
	if m != nil {
		return m.RequestingNetwork
	}
	return ""
}

func (m *NetworkQuery) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *NetworkQuery) GetRequestorSignature() string {
	if m != nil {
		return m.RequestorSignature
	}
	return ""
}

func (m *NetworkQuery) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *NetworkQuery) GetRequestingOrg() string {
	if m != nil {
		return m.RequestingOrg
	}
	return ""
}

func init() {
	proto.RegisterType((*DbName)(nil), "networks.DbName")
	proto.RegisterType((*RelayDatabase)(nil), "networks.RelayDatabase")
	proto.RegisterMapType((map[string]string)(nil), "networks.RelayDatabase.PairsEntry")
	proto.RegisterType((*GetStateMessage)(nil), "networks.GetStateMessage")
	proto.RegisterType((*NetworkQuery)(nil), "networks.NetworkQuery")
}

func init() { proto.RegisterFile("networks/networks.proto", fileDescriptor_49dd564d51b8056f) }

var fileDescriptor_49dd564d51b8056f = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x93, 0xe6, 0x6b, 0xd2, 0x92, 0x30, 0x54, 0xad, 0xb1, 0x40, 0x8a, 0x2c, 0x21, 0x95,
	0x43, 0x62, 0x54, 0x84, 0x14, 0x21, 0x81, 0x04, 0x2a, 0x42, 0x1c, 0x28, 0x34, 0xb9, 0x71, 0x89,
	0xd6, 0xf6, 0xe0, 0xae, 0xe2, 0x78, 0xc3, 0xee, 0xa6, 0x95, 0xcf, 0xfc, 0x1b, 0xfe, 0x04, 0x7f,
	0x0d, 0x79, 0xbd, 0x8e, 0x0d, 0x12, 0xb7, 0x9d, 0xf7, 0xde, 0xcc, 0xbc, 0x9d, 0x9d, 0x85, 0xf3,
	0x8c, 0xf4, 0xbd, 0x90, 0x1b, 0x15, 0x54, 0x87, 0xf9, 0x4e, 0x0a, 0x2d, 0x70, 0x50, 0xc5, 0xde,
	0x24, 0x12, 0xdb, 0xad, 0xc8, 0x02, 0x16, 0x6d, 0x4a, 0xce, 0x43, 0x8b, 0x28, 0xcd, 0x34, 0x95,
	0x98, 0xff, 0x04, 0x7a, 0x57, 0xe1, 0x35, 0xdb, 0x12, 0x22, 0x1c, 0x65, 0x6c, 0x4b, 0xae, 0x33,
	0x75, 0x2e, 0x86, 0x4b, 0x73, 0xf6, 0x7f, 0x3a, 0x70, 0xb2, 0xa4, 0x94, 0xe5, 0x57, 0x4c, 0xb3,
	0x90, 0x29, 0xc2, 0x05, 0x74, 0x77, 0x8c, 0x4b, 0xe5, 0x3a, 0xd3, 0xce, 0xc5, 0xe8, 0xd2, 0x9f,
	0x1f, 0xfa, 0xff, 0xa5, 0x9b, 0x7f, 0x2d, 0x44, 0x1f, 0x32, 0x2d, 0xf3, 0x65, 0x99, 0xe0, 0x2d,
	0x00, 0x6a, 0x10, 0x27, 0xd0, 0xd9, 0x50, 0x6e, 0x9b, 0x15, 0x47, 0x3c, 0x85, 0xee, 0x1d, 0x4b,
	0xf7, 0xe4, 0xb6, 0x0d, 0x56, 0x06, 0xaf, 0xdb, 0x0b, 0xc7, 0x7f, 0x01, 0xe3, 0x8f, 0xa4, 0x57,
	0x85, 0xeb, 0xcf, 0xa4, 0x14, 0x4b, 0x08, 0x9f, 0x02, 0x48, 0xfa, 0xb1, 0x27, 0xa5, 0xd7, 0x3c,
	0xb6, 0x55, 0x86, 0x16, 0xf9, 0x14, 0xfb, 0xbf, 0xda, 0x70, 0x7c, 0x5d, 0x1a, 0xbb, 0xd9, 0x93,
	0xcc, 0xf1, 0x0c, 0x7a, 0x3b, 0x91, 0xf2, 0x28, 0x37, 0xbe, 0x87, 0x4b, 0x1b, 0xa1, 0x0b, 0x7d,
	0x16, 0xc7, 0x92, 0x94, 0xb2, 0x6d, 0xab, 0x10, 0x9f, 0xc3, 0xc4, 0xd6, 0xe3, 0x59, 0xb2, 0x96,
	0xc5, 0xe5, 0xdc, 0x8e, 0x91, 0x8c, 0x6b, 0xdc, 0xdc, 0x19, 0x67, 0x80, 0x0d, 0xa9, 0x1d, 0x88,
	0x7b, 0x64, 0xc4, 0x0f, 0x6b, 0xc6, 0x1a, 0xc2, 0x29, 0x8c, 0x22, 0x92, 0x9a, 0x7f, 0xe7, 0x11,
	0xd3, 0xe4, 0x76, 0x8d, 0xae, 0x09, 0x61, 0x00, 0x8f, 0x6c, 0x9a, 0x90, 0x6b, 0xc5, 0x93, 0x8c,
	0xe9, 0xbd, 0x24, 0xb7, 0x67, 0x94, 0x78, 0xa0, 0x56, 0x15, 0x53, 0xcc, 0x2e, 0x13, 0x59, 0x44,
	0x6e, 0xbf, 0x9c, 0x9d, 0x09, 0xf0, 0x19, 0x3c, 0x68, 0xf8, 0x12, 0x32, 0x71, 0x07, 0x86, 0x3e,
	0xa9, 0xd1, 0x2f, 0x32, 0xb9, 0xfc, 0xed, 0x40, 0xbf, 0xf2, 0xf6, 0x0a, 0x8e, 0x97, 0x25, 0x69,
	0xc6, 0x8d, 0x67, 0xf5, 0xfb, 0x36, 0xe7, 0xe9, 0x8d, 0xe6, 0xe5, 0x2e, 0xcd, 0xdf, 0x45, 0x1b,
	0xbf, 0x85, 0x6f, 0x60, 0x50, 0xbd, 0x10, 0x3e, 0xae, 0x53, 0xfe, 0x79, 0x35, 0xef, 0xb4, 0xca,
	0x6a, 0xf6, 0xf0, 0x5b, 0xf8, 0x16, 0xc6, 0x16, 0x39, 0xec, 0xd9, 0xa4, 0xae, 0x52, 0xee, 0xa7,
	0x77, 0xfe, 0x9f, 0x55, 0xf3, 0x5b, 0xef, 0x57, 0xdf, 0x6e, 0x12, 0xae, 0x6f, 0xf7, 0x61, 0x51,
	0x3f, 0xb8, 0xcd, 0x77, 0x24, 0x53, 0x8a, 0x13, 0x92, 0xb3, 0x94, 0x85, 0x2a, 0xb8, 0x27, 0x76,
	0x47, 0x72, 0x16, 0xa7, 0x7a, 0xc6, 0x33, 0x4d, 0x52, 0xec, 0x48, 0xb2, 0x90, 0xa7, 0x5c, 0xe7,
	0x81, 0xfd, 0x12, 0xe6, 0x33, 0xa8, 0x59, 0x22, 0x0e, 0xff, 0x29, 0xec, 0x19, 0xec, 0xe5, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xa2, 0xfc, 0x2c, 0x6b, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkClient interface {
	// endpoint for a network to request remote relay state via local relay
	RequestState(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*common.Ack, error)
	// This rpc endpooint is for polling the local relay for request state.
	GetState(ctx context.Context, in *GetStateMessage, opts ...grpc.CallOption) (*common.RequestState, error)
	// NOTE: This rpc is just for debugging.
	RequestDatabase(ctx context.Context, in *DbName, opts ...grpc.CallOption) (*RelayDatabase, error)
}

type networkClient struct {
	cc *grpc.ClientConn
}

func NewNetworkClient(cc *grpc.ClientConn) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) RequestState(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*common.Ack, error) {
	out := new(common.Ack)
	err := c.cc.Invoke(ctx, "/networks.Network/RequestState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetState(ctx context.Context, in *GetStateMessage, opts ...grpc.CallOption) (*common.RequestState, error) {
	out := new(common.RequestState)
	err := c.cc.Invoke(ctx, "/networks.Network/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) RequestDatabase(ctx context.Context, in *DbName, opts ...grpc.CallOption) (*RelayDatabase, error) {
	out := new(RelayDatabase)
	err := c.cc.Invoke(ctx, "/networks.Network/RequestDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServer is the server API for Network service.
type NetworkServer interface {
	// endpoint for a network to request remote relay state via local relay
	RequestState(context.Context, *NetworkQuery) (*common.Ack, error)
	// This rpc endpooint is for polling the local relay for request state.
	GetState(context.Context, *GetStateMessage) (*common.RequestState, error)
	// NOTE: This rpc is just for debugging.
	RequestDatabase(context.Context, *DbName) (*RelayDatabase, error)
}

// UnimplementedNetworkServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func (*UnimplementedNetworkServer) RequestState(ctx context.Context, req *NetworkQuery) (*common.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestState not implemented")
}
func (*UnimplementedNetworkServer) GetState(ctx context.Context, req *GetStateMessage) (*common.RequestState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedNetworkServer) RequestDatabase(ctx context.Context, req *DbName) (*RelayDatabase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDatabase not implemented")
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

func _Network_RequestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).RequestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networks.Network/RequestState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).RequestState(ctx, req.(*NetworkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networks.Network/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetState(ctx, req.(*GetStateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_RequestDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).RequestDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networks.Network/RequestDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).RequestDatabase(ctx, req.(*DbName))
	}
	return interceptor(ctx, in, info, handler)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networks.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestState",
			Handler:    _Network_RequestState_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Network_GetState_Handler,
		},
		{
			MethodName: "RequestDatabase",
			Handler:    _Network_RequestDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networks/networks.proto",
}
